"""
File operations for scanning directories and generating task files.
"""

import os
from typing import List, Set

from .utils import print_status, print_progress


def find_files_with_suffixes(directory: str, suffixes: Set[str]) -> List[str]:
    """
    Recursively find all files with the specified suffixes in the directory.
    
    Args:
        directory: Root directory to search
        suffixes: Set of file suffixes to look for
        
    Returns:
        List of file paths matching the suffixes
    """
    matching_files = []
    
    print_status(f"Scanning directory: {os.path.abspath(directory)}")
    print_status(f"Looking for suffixes: {', '.join(sorted(suffixes))}")
    
    try:
        # Count total files for progress tracking
        total_files = sum(len(files) for _, _, files in os.walk(directory))
        scanned_files = 0
        
        for root, dirs, files in os.walk(directory):
            for file in files:
                scanned_files += 1
                print_progress(scanned_files, total_files, "Scanning files")
                
                file_path = os.path.join(root, file)
                # Check if file ends with any of the specified suffixes
                if any(file.endswith(suffix) for suffix in suffixes):
                    matching_files.append(file_path)
        
        print()  # Clear progress bar
        print_status(f"Scan complete! Found {len(matching_files)} matching files out of {total_files} total files")
        
    except Exception as e:
        print(f"\n❌ Error scanning directory {directory}: {e}")
        return []
    
    return sorted(matching_files)


def generate_task_file(files: List[str], output_file: str = "gzip.cmds") -> str:
    """
    Generate a task file with gzip commands for the found files.
    
    Args:
        files: List of file paths to compress
        output_file: Name of the output task file
        
    Returns:
        Path to the generated task file
    """
    task_file_path = os.path.abspath(output_file)
    
    print_status(f"Generating task file: {task_file_path}")
    
    with open(task_file_path, 'w') as f:
        f.write("# Gzip task file generated by slurm_gzip.py\n")
        f.write("# Each line contains a gzip command to compress a file\n")
        f.write("# Run with: parallel < gzip.cmds\n")
        f.write("# Or use with Slurm: srun --multi-prog gzip.cmds\n\n")
        
        skipped_count = 0
        for i, file_path in enumerate(files):
            # Skip if file is already compressed
            if file_path.endswith('.gz'):
                skipped_count += 1
                continue
                
            # Create gzip command
            gzip_cmd = f"gzip '{file_path}'"
            f.write(f"{gzip_cmd}\n")
            
            # Show progress
            print_progress(i + 1, len(files), "Writing commands")
    
    print()  # Clear progress bar
    
    commands_written = len(files) - skipped_count
    if skipped_count > 0:
        print_status(f"Skipped {skipped_count} already compressed files", "⚠️")
    
    print_status(f"Task file created with {commands_written} gzip commands", "✅")
    
    return task_file_path
